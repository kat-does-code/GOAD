# Set up apt and install elk stack
- name: "Update cache"
  apt:
    update_cache: true
    cache_valid_time: 86400

- name: Add required dependencies.
  apt:
    name:
      - apt-transport-https
      - gnupg2
      - unzip
    state: present
    update_cache: yes

- name: Add Elasticsearch apt key.
  apt_key:
    url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    state: present

- name: Add Elasticsearch repository.
  apt_repository:
    repo: 'deb https://artifacts.elastic.co/packages/{{ elasticsearch_version }}/apt stable main'
    state: present
    update_cache: true

- name: Install ELK stack
  apt:
    name: 
      - elasticsearch
      - kibana
      - elastic-agent
    state: present

- name: elasticsearch change start timeout to 3min
  lineinfile:
    destfile: /usr/lib/systemd/system/elasticsearch.service
    regexp: 'TimeoutStartSec='
    line: 'TimeoutStartSec=180'

# Copy config files 
- name: copy kibana config
  copy:
    src: kibana.yml
    dest: /etc/kibana/kibana.yml
    owner: "root"
    group: "kibana"
    mode: 0660

- name: copy elasticsearch config
  copy:
    src: elasticsearch.yml
    dest: /etc/elasticsearch/elasticsearch.yml
    owner: "root"
    group: "elasticsearch"
    mode: 0660


- name: start elasticsearch
  service:
    name: elasticsearch
    state: started
    enabled: true

- name: create_kibana_token
  become: true
  command: /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token --scope kibana --url https://192.168.56.50:9200
  register: kibana_enrollment_token

- name: Enroll kibana with the token
  shell: "sudo -u kibana /usr/share/kibana/bin/kibana-setup --enrollment-token {{ kibana_enrollment_token.stdout }}"
  become: true
  environment:
    TMPDIR: /tmp/.ansible-kibana

- name: reset elasticsearch password
  become: true
  command: /usr/share/elasticsearch/bin/elasticsearch-reset-password --batch --user elastic
  register: elastic_password_reset

- name: capture_elastic_passsword
  set_fact:
    elastic_password: "{{ elastic_password_reset.stdout | regex_search('New value: (\\S+)', '\\1') | first }}"

- name: Save elastic password on control node
  copy:
    content: "{{ elastic_password }}"
    dest: "/home/goad/elastic_password.txt"
    mode: '0644'
    owner: goad
  delegate_to: localhost

- name: hardcode elastic password into config file
  template:
    src: elastic-agent.yml
    dest: /etc/elastic-agent/elastic-agent.yml
  vars:
    elastic_password: "{{ elastic_password }}"  

- name: Show creds
  debug:
    msg: |
      Elastic user password: {{ elastic_password }} 

- name: start kibana
  service:
    name: kibana
    state: started
    enabled: true

- name: Wait until the REST endpoint is available
  ansible.builtin.uri:
    url: "http://localhost:5601/api/status"
    method: GET
    status_code: 200
    return_content: no
    url_username: "elastic"
    url_password: "{{ elastic_password }}"
    force_basic_auth: yes
  register: api_status
  until: api_status.status == 200
  delay: 10    # seconds between retries
  retries: 10  # maximum number of retries (adjust as needed)
  ignore_errors: no

- name: Generate enrollment token for Fleet API
  uri:
    url: "http://localhost:5601/api/fleet/service_tokens"
    method: POST
    headers:
      kbn-xsrf: "true"
      Content-Type: "application/json"
    user: "elastic"
    password: "{{ elastic_password }}"
    return_content: yes
    status_code: 200
    force_basic_auth: yes
  register: response

- name: Parse the enrollment token from the response
  set_fact:
    enrollment_token: "{{ response.json.value }}"

# - name: Print the enrollment token (for debugging)
#   debug:
#     msg: "Generated enrollment token: {{ enrollment_token }}"

- name: Update Elastic Agent config with the enrollment token
  ansible.builtin.replace:
    path: "/etc/elastic-agent/elastic-agent.yml"  # Path to the agent configuration file
    regexp: 'token: "YOUR_ENROLLMENT_TOKEN"'
    replace: 'token: "{{ enrollment_token }}"'

- name: Generate kibana encryption keys
  command: /usr/share/kibana/bin/kibana-encryption-keys generate --silent
  register: encryption_keys

- name: start elastic-agent
  service:
    name: elastic-agent
    state: started
    enabled: true

